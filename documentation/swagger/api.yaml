swagger: "2.0"
info:
  title: "Eco Rewards Hub API"
  description: >
    The Eco Rewards API provides admin users the ability to manage schemes, organisations, groups and members. It's allows suppliers to submit journeys via CSV.
    HTTPS is required as it makes use of RFC 7617 Basic Authentication.
  version: "1.0.0"
  contact:
    email: "linusnorton@gmail.com"
host: "api.ecorewards.co.uk"
schemes:
  - "https"
paths:
  /health:
    get:
      summary: "Check the status of the service"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Health"
  /login:
    post:
      summary: "Authenticate an admin user"
      description: "This endpoint allows users generate a token so they can login to the admin user interface"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Username and password to authenticate"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'

  /schemes:
    get:
      summary: "Return all the schemes"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Scheme"
              links:
                type: "object"
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /scheme/{schemeId}:
    get:
      summary: "Return a scheme"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "schemeId"
          in: "path"
          description: "ID of scheme to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Scheme"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    put:
      summary: "Edit a scheme"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of Scheme"
          required: true
          schema:
            $ref: "#/definitions/Scheme"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Scheme"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    delete:
      summary: "Delete a scheme"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "string"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /scheme:
    post:
      summary: "Create a scheme"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of Scheme"
          required: true
          schema:
            $ref: "#/definitions/Scheme"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Scheme"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []

  /organisations:
    get:
      summary: "Return all the organisations"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Organisation"
              links:
                type: "object"
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /organisation/{organisationId}:
    get:
      summary: "Return an organisation"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "organisationId"
          in: "path"
          description: "ID of organisation to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Organisation"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    put:
      summary: "Edit an organisation"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of organisation"
          required: true
          schema:
            $ref: "#/definitions/Organisation"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Organisation"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    delete:
      summary: "Delete an organisation"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "string"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /organisation:
    post:
      summary: "Create an organisation"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of Organisation"
          required: true
          schema:
            $ref: "#/definitions/Organisation"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Organisation"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []

  /groups:
    get:
      summary: "Return all the member groups"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Group"
              links:
                type: "object"
        500:
          $ref: '#/responses/500'
  /group/{groupId}:
    get:
      summary: "Return a group"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "groupId"
          in: "path"
          description: "ID of group to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Group"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    put:
      summary: "Edit a group"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of group"
          required: true
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Group"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    delete:
      summary: "Delete a scheme"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "string"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /group:
    post:
      summary: "Create n group"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Name of Group"
          required: true
          schema:
            $ref: "#/definitions/Group"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Group"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []

  /members:
    get:
      summary: "Return all members"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Member"
              links:
                type: "object"
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
    post:
      summary: "Create a number of members"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Member details"
          required: true
          schema:
            type: "object"
            required:
              - group
              - quantity
            properties:
              group:
                type: "string"
                example: "/group/1"
              defaultTransportMode:
                type: "string"
                example: "bus"
              defaultDistance:
                type: "number"
                description: "Distance in miles"
                example: 1.2
              quantity:
                type: "integer"
                example: 100
                description: "Number to create"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Member"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []

  /member/{memberId}:
    get:
      summary: "Return a member"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "memberId"
          in: "path"
          description: "ID of member to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Member"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
    post:
      summary: "Create a member"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Member details"
          required: true
          schema:
            type: "object"
            required:
              - group
              - smartcard
              - defaultTransportMode
              - defaultDistance
            properties:
              group:
                type: "string"
                example: "/group/1"
              defaultTransportMode:
                type: "string"
                example: "bus"
              defaultDistance:
                type: "number"
                description: "Distance in miles"
                example: 1.2
              smartcard:
                type: "integer"
                example: 654321002222230099
                description: "Number to create"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Member"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'

  /journey:
    post:
      summary: Uploads member journeys.
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: upfile
          type: string
          description: The CSV file to upload. There should be no header row and the fields should be separated by a comma.
      responses:
        200:
          description: "Successfully process file."
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  errors:
                    type: "array"
                    items:
                      type: "string"
              links:
                type: "object"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []
  /journeys:
    get:
      summary: "Return all journeys"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Journey"
              links:
                type: "object"
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
      security:
        - basicAuth: []

securityDefinitions:
  basicAuth:
    type: basic

responses:
  400:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  404:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'

definitions:

  Health:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
          - "UP"
          - "DOWN"

  LoginRequest:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"

  LoginResponse:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          token:
            type: "string"
          name:
            type: "string"
      links:
        type: "object"

  Error:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          error:
            type: "string"
      links:
        type: "object"

  Scheme:
    type: "object"
    required:
      - name
    properties:
      id:
        type: "string"
        example: "/scheme/1"
      name:
        type: "string"
        example: "Norfolk County Council"

  Organisation:
    type: "object"
    required:
      - scheme
      - name
    properties:
      id:
        type: "string"
        example: "/organisation/2"
      scheme:
        type: "string"
        example: "/scheme/1"
      name:
        type: "string"
        example: "Notre Dame High School"

  Group:
    type: "object"
    required:
      - organisation
      - name
    properties:
      id:
        type: "string"
        example: "/group/1"
      organisation:
        type: "string"
        example: "/organisation/2"
      name:
        type: "string"
        example: "Class of 2019"

  Member:
    type: "object"
    required:
      - group
    properties:
      id:
        type: "string"
        example: "/member/5"
      group:
        type: "string"
        example: "/group/1"
      rewards:
        type: "integer"
        example: 100
      carbonSaving:
        type: "number"
        example: 604.24
      defaultTransportMode:
        type: "string"
        example: "train"
      defaultDistance:
        type: "number"
        example: 4.2

  Journey:
    type: "object"
    required:
      - id
      - source
      - uploaded
      - travelDate
      - memberId
      - distance
      - mode
    properties:
      id:
        type: "number"
        example: 1
      source:
        type: "string"
        example: "A Third Party Retailer"
      uploaded:
        type: "string"
        example: "2019-12-12T07:01:40Z"
      processed:
        type: "string"
        example: "null"
      travelDate:
        type: "string"
        example: "2019-12-12T07:01:40Z"
      memberId:
        type: "string"
        example: "30230000000000012"
      distance:
        type: "number"
        example: 4.65
      mode:
        type: "string"
        example: "Train"
      rewardsEarned:
        type: "number"
        example: "null"
      carbonSaving:
        type: "number"
        example: "null"
